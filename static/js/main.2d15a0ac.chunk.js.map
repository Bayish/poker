{"version":3,"sources":["components/CardDeck.js","App.js","index.js"],"names":["CardDeck","makeCards","cardsArray","cardsNoNumber","i","j","length","cardsObject","suit","ranks","id","exampleCards","card","push","getCard","number","splice","getCards","howMany","arrayNumber","randomArray","countOfCard","suitName","fiveCard","this","count","min","max","arr","Math","floor","random","indexOf","App","state","isShow","cardDeck","firstFiveCards","countChangeCards","newCards","toOpenNewCard","cards","winning","setState","map","p","getOutcome","suits","hearts","clubs","spades","diams","J","Q","K","A","point","double","trouble","twoCards","flash","fullHouse","poker","key","isNaN","parseInt","indexOfWinning","index","apply","handleToggle","alert","targetToggle","e","currentTarget","className","type","Card","props","onClick","bind","toString","toLowerCase","changedCards","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2d15a0ac.chunk.js","sourcesContent":["class CardDeck {\n    constructor() {\n        this.exampleCards = {\n            countOfCard: 51,\n            card:[],\n            fiveCard: [],\n        }\n    }\n    randomArray (count, min, max){\n        if(count > (max - min)) return;\n        const arr = [];\n        while (count){\n            const number =  Math.floor(Math.random() * (max - min + 1) + min);\n            if(arr.indexOf(number) === -1){\n                arr.push(number);\n                count--;\n            }\n            --max;\n        }\n        return arr;\n    }\n    makeCards = () => {\n        const cardsArray = ['H', 'D', 'C', 'S'];\n        const cardsNoNumber = ['J', 'Q', 'K', 'A'];\n\n        for(let i = 2; i < 11; i++){\n            for(let j = 0; j < cardsArray.length; j++){\n                const cardsObject = {suit: cardsArray[j], ranks:i, id: cardsArray[j] + i}\n                this.exampleCards.card.push(cardsObject);\n            }\n        }\n\n        for(let j = 0; j < cardsArray.length; j++){\n            for(let i = 0; i < cardsNoNumber.length; i++){\n                const cardsObject = {suit: cardsArray[j], ranks:cardsNoNumber[i], id: cardsArray[j] + cardsNoNumber[i]}\n                this.exampleCards.card.push(cardsObject);\n            }\n        }\n    };\n    getCard = (number)=> {\n        return this.exampleCards.card.splice(number, 1);\n    }\n    getCards = (howMany) => {\n        const arrayNumber = this.randomArray(howMany, 0, this.exampleCards.countOfCard);\n        for(let i = 0; i < howMany; i++){\n            const getCard = this.getCard(arrayNumber[i]);\n            if(getCard[0].suit === 'D'){\n                getCard[0].suitName = 'diams'\n                getCard[0].suit = '♦'\n            } else if(getCard[0].suit === 'H'){\n                getCard[0].suitName = 'hearts';\n                getCard[0].suit = '♥';\n            } else if(getCard[0].suit === 'C'){\n                getCard[0].suitName = 'clubs';\n                getCard[0].suit = '♣';\n            } else{\n                getCard[0].suitName = 'spades';\n                getCard[0].suit = '♠';\n            }\n            this.exampleCards.fiveCard.push(getCard[0]);\n        }\n        return this.exampleCards.fiveCard;\n    }\n}\n\n\nexport default CardDeck;","import './App.css';\nimport './components/cards.css'\nimport CardDeck from \"./components/CardDeck\";\nimport {Component} from 'react';\n\nclass App extends Component {\n    state = {\n        isShow: false,\n        cardDeck: new CardDeck(),\n        firstFiveCards: 0,\n        countChangeCards: 0,\n        newCards: 0,\n        toOpenNewCard: 0,\n        cards: [],\n        winning: [],\n    }\n    newCards = () => {\n     if(this.state.toOpenNewCard < 4){\n         const newCards = this.state.cardDeck.getCards(this.state.toOpenNewCard);\n         this.setState({\n             cards: this.state.cards.map((p) =>{\n                 for(let i = 0; i < newCards.length; i++){\n                     return {p: newCards}\n                 }\n             })\n         })\n     }\n    }\n    getOutcome = () => {\n        if(this.state.cards.length > 0){\n            const suits = {\n                hearts: 0,\n                clubs: 0,\n                spades: 0,\n                diams: 0,\n            }\n            const ranks = {\n                2 : 0,\n                3 : 0,\n                4 : 0,\n                5 : 0,\n                6 : 0,\n                7 : 0,\n                8 : 0,\n                9 : 0,\n                10: 0,\n                J : 0,\n                Q : 0,\n                K : 0,\n                A : 0,\n            }\n\n\n            const point = [{double: 0}, {trouble: 0},{twoCards: 0}, {flash: 0}, {fullHouse: 0}, {poker:0}]\n\n            this.state.cards.map(card => {\n                for(const key in suits){\n                    if(card.suitName === key){\n                        suits[key]++\n                    }\n                    continue;\n                }\n\n                for(const key in ranks){\n                    if(!isNaN(card.ranks)){\n                        if(card.ranks === parseInt(key)){\n                            ranks[key]++\n                        }\n                    }else if(isNaN(card.ranks)){\n                        if(card.ranks === key){\n                            ranks[key]++\n                        }\n                    }\n                    continue;\n                }\n\n            });\n            for(const key in ranks){\n                if(ranks[key] > 3){\n                    point[5].poker++\n                } else if(ranks[key] > 2){\n                    ++point[1].trouble\n                } else if(ranks[key] > 1){\n                    ++point[0].double;\n                }\n            }\n            for(let key in suits){\n                if(suits[key] > 4){\n                    point[3].flash++\n                }\n            }\n            if(point[0].double > 0 && point[1].trouble > 0){\n                point[4].fullHouse++\n            }else if(point[0].double > 1){\n                point[2].twoCards++;\n            }\n\n            const indexOfWinning = [];\n            for(let i = 0; i < point.length; i++){\n                for(const key in point[i]){\n                    if(point[i][key] > 0){\n                        indexOfWinning.push(i)\n                    }\n                }\n            }\n            const index = Math.max.apply(null, indexOfWinning);\n           if(index === 0){\n                this.setState({winning: 2})\n            }else if(index === 1){\n               this.setState({winning: 4})\n            }else if(index === 2){\n               this.setState({winning: 6})\n            }else if(index === 3){\n               this.setState({winning: 8})\n            }else if(index === 4){\n                this.setState({winning: 16})\n            }else if(index === 5){\n                this.setState({winning: 20})\n            }else if(!isNaN(index)){\n               this.setState({winning: 0})\n            }\n        }\n    }\n    handleToggle = () => {\n        if(this.state.toOpenNewCard < 1 && this.state.firstFiveCards < 1){\n            this.state.cardDeck.makeCards();\n            this.setState({cards: this.state.cardDeck.getCards(5)})\n            const {isShow} = this.state;\n            this.setState({isShow: !isShow});\n            this.state.countChangeCards += 5;\n            this.state.newCards += 1;\n            ++this.state.firstFiveCards;\n            this.getOutcome()\n        } else if((this.state.newCards > 0 && this.state.newCards < 2) && this.state.toOpenNewCard > 0){\n            this.newCards()\n        }else if(this.state.newCards > 1){\n            alert('You can only change max 3 of cards in  one time')\n        }\n    }\n    targetToggle = (e) => {\n        if(e.currentTarget.className !== 'card back'){\n            if(this.state.toOpenNewCard > 3){\n                alert('You can  change max 3 cards')\n            }else if(this.state.toOpenNewCard < 3){\n                this.state.toOpenNewCard++;\n                return e.currentTarget.className = 'card back'\n            }\n        }\n    }\n    type =()=>{\n        const {isShow} = this.state;\n        this.setState({isShow: !isShow});\n    }\n\n    render() {\n        const Card = props => {\n            return (\n                <li>\n                    <div onClick={this.targetToggle.bind(this)} className={this.state.isShow ? `card rank-${props.ranks.toString().toLowerCase()} ${props.suitName}`: 'card back'}>\n                        <span className=\"rank\">{this.state.isShow? props.ranks : \"\"}</span>\n                        <span className=\"suit\">{this.state.isShow? props.suit : \"\"}</span>\n                    </div>\n                </li>\n            )\n        };\n\n        const changedCards = this.state.cards.map((card) => (\n            <Card key = {card.id} suit={card.suit} ranks={card.ranks} suitName={card.suitName}/>\n        ));\n\n        return (\n            <div className=\"playingCards\">\n                <div className=\"container\">\n                    <table>\n                        <tbody>\n                            <tr>\n                                <td>Royal Flush</td>\n                                <td>250</td>\n                                <td>500</td>\n                                <td>750</td>\n                                <td>1000</td>\n                                <td>5000</td>\n                            </tr>\n                            <tr>\n                                <td>Straight Flush</td>\n                                <td>50</td>\n                                <td>100</td>\n                                <td>150</td>\n                                <td>200</td>\n                                <td>250</td>\n                            </tr>\n                            <tr>\n                                <td>Four of a Kind</td>\n                                <td>25</td>\n                                <td>50</td>\n                                <td>75</td>\n                                <td>100</td>\n                                <td>125</td>\n                            </tr>\n                            <tr>\n                                <td>Full House</td>\n                                <td>9</td>\n                                <td>18</td>\n                                <td>27</td>\n                                <td>36</td>\n                                <td>45</td>\n                            </tr>\n                            <tr>\n                                <td>Flush</td>\n                                <td>6</td>\n                                <td>12</td>\n                                <td>18</td>\n                                <td>24</td>\n                                <td>30</td>\n                            </tr>\n                            <tr>\n                                <td>Straight</td>\n                                <td>4</td>\n                                <td>8</td>\n                                <td>12</td>\n                                <td>16</td>\n                                <td>20</td>\n                            </tr>\n                            <tr>\n                                <td>Three of a Kind</td>\n                                <td>3</td>\n                                <td>6</td>\n                                <td>9</td>\n                                <td>12</td>\n                                <td>15</td>\n                            </tr>\n                            <tr>\n                                <td>Two Pairs</td>\n                                <td>2</td>\n                                <td>4</td>\n                                <td>6</td>\n                                <td>8</td>\n                                <td>10</td>\n                            </tr>\n                            <tr>\n                                <td>Jacks or Better</td>\n                                <td>1</td>\n                                <td>2</td>\n                                <td>3</td>\n                                <td>4</td>\n                                <td>5</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <div className=\"credits\">\n                        <ul className=\"table-credits\">\n                            <li>\n                               Bite: 0\n                            </li>\n                            <li className=\"winning\">\n                                Win: {this.state.winning}\n                            </li>\n                            <li>\n                                Credits: 100\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n                <div className=\"container cards\">\n                    <ul className=\"table container\">\n                        {changedCards}\n                    </ul>\n                    <div className='container'>\n                        <button onClick={this.handleToggle} className='btn-draw'>Deal Draw</button>\n                        <button onClick={this.getOutcome} className='btn-max'>result</button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}